<?phpnamespace models;require_once '../../config/Connection.php';require_once '../../Teamplates/JsonResponseHelper.php';use Couchbase\IndexFailureException;use Exception;class Contact_AndHotLines extends \Connection{  public function store(string $municipality, string $phoneNumber):void  {      try {          $conn = $this->Connect();          $query = "INSERT INTO contacts(mucipality, phonenumber)VALUES (?,?)";          $stmt = $conn->prepare($query);          if (!$stmt){              \JsonResponseHelper::JsonResponseHelper(false, 'Failed To Prepared Statement');              return;          }          $stmt->bind_param('ss',$municipality,$phoneNumber);          if ($stmt->execute()){              \JsonResponseHelper::JsonResponseHelper(true, 'Successfully Created');          }else{              \JsonResponseHelper::JsonResponseHelper(false, 'Error'. $stmt->error);          }      }catch (Exception $e){          error_log('Database Error' . $e->getMessage());      }  }  public function showAll():array  {      $data = [];      try {          $conn = $this->Connect();          $result = $conn->query("SELECT * FROM contacts");          if ($result->num_rows > 0){              while ($row = $result->fetch_assoc()){                  $data[] = $row;              }          }      }catch (Exception $e){          error_log('Database Connection'. $e->getMessage());      }      return $data;  }  public function update(string $municipality, string $phoneNumber, int $Id):void  {      try {          $conn = $this->Connect();          $query = "UPDATE  contacts SET Mucipality = ? , PhoneNumber = ? WHERE id = ?";          $stmt = $conn->prepare($query);          if (!$stmt){              \JsonResponseHelper::JsonResponseHelper(false, 'Failed to Prepared Statement');              return;          }          $stmt->bind_param('ssi',$municipality,$phoneNumber,$Id);          if ($stmt->execute()){              \JsonResponseHelper::JsonResponseHelper(true,'Successfully Update'. ' '. $municipality);          }else{              \JsonResponseHelper::JsonResponseHelper(false, 'Error'.$stmt->error);          }      }catch (Exception $e){          error_log('DatabaseError'. $e->getMessage());      }  }  public function Delete($Id):void  {      try {          $conn = $this->Connect();          $query = "DELETE FROM contacts WHERE id = ?";          $stmt = $conn->prepare($query);          if (!$stmt){              \JsonResponseHelper::JsonResponseHelper(false, 'Failed to Prepared Statement');              return;          }          $stmt->bind_param('i',$Id);          if ($stmt->execute()){              \JsonResponseHelper::JsonResponseHelper(true,'Successfully Deleted');          }else{              \JsonResponseHelper::JsonResponseHelper(false, 'Error'.$stmt->error);          }      }catch (Exception $e){          error_log('DatabaseError'. $e->getMessage());      }  }}